#!/usr/bin/env python3
"""
Unity build generator for FastLED optimization.

This module generates unity build files that combine all sketch source files
into a single compilation unit for maximum optimization.
"""

from pathlib import Path
from typing import Tuple


class UnityBuildGenerator:
    """Generates unity build files for optimized sketch compilation."""
    
    def __init__(self, sketch_dir: Path, output_dir: Path):
        self.sketch_dir = sketch_dir
        self.output_dir = output_dir
        
    def generate_unity_build(self) -> Tuple[Path, Path]:
        """Generate unity.cpp and main.cpp files."""
        
        # Ensure output directory exists
        self.output_dir.mkdir(parents=True, exist_ok=True)
        
        # Find all source files
        source_files = self._find_source_files()
        
        # Generate unity.cpp that includes all source content
        unity_cpp = self._generate_unity_cpp(source_files)
        
        # Generate main.cpp wrapper for Arduino entry points
        main_cpp = self._generate_main_wrapper()
        
        return unity_cpp, main_cpp
    
    def _find_source_files(self) -> list[Path]:
        """Find all .ino and .cpp files in sketch directory."""
        source_files = []
        
        # Find .ino files (Arduino sketches)
        source_files.extend(self.sketch_dir.glob("*.ino"))
        
        # Find .cpp files 
        source_files.extend(self.sketch_dir.glob("*.cpp"))
        
        # Find .c files
        source_files.extend(self.sketch_dir.glob("*.c"))
        
        # Sort for deterministic builds
        return sorted(source_files)
    
    def _generate_unity_cpp(self, source_files: list[Path]) -> Path:
        """Generate unity.cpp that includes all source files inline."""
        unity_path = self.output_dir / "unity.cpp"
        
        # Start with necessary Arduino includes
        content = [
            "// Auto-generated unity build file",
            "// Generated by FastLED build optimizer",
            "",
            "#include <Arduino.h>",
            "#include <FastLED.h>",
            "",
        ]
        
        # Include all source file contents inline
        for src_file in source_files:
            content.append(f"// === Contents of {src_file.name} ===")
            
            try:
                src_content = src_file.read_text(encoding='utf-8')
                
                # Remove #include <Arduino.h> and #include <FastLED.h> to avoid duplicates
                lines = src_content.split('\n')
                filtered_lines = []
                for line in lines:
                    stripped = line.strip()
                    if (stripped.startswith('#include <Arduino.h>') or 
                        stripped.startswith('#include <FastLED.h>') or
                        stripped.startswith('#include "Arduino.h"') or
                        stripped.startswith('#include "FastLED.h"')):
                        # Skip these includes as we already have them
                        continue
                    filtered_lines.append(line)
                
                content.extend(filtered_lines)
                content.append("")  # Empty line between files
                
            except Exception as e:
                content.append(f"// ERROR reading {src_file.name}: {e}")
                content.append("")
        
        # Write the unified file
        unity_content = '\n'.join(content)
        unity_path.write_text(unity_content, encoding='utf-8')
        
        return unity_path
    
    def _generate_main_wrapper(self) -> Path:
        """Generate main.cpp wrapper with Arduino entry points."""
        main_path = self.output_dir / "main.cpp"
        
        # For Arduino builds, we don't need a custom main() function
        # The Arduino framework provides it and calls setup()/loop()
        # So we just create an empty file or include the unity file
        main_content = """// Auto-generated main wrapper
// Unity build is compiled directly as Arduino sketch
// This file exists for compatibility but isn't used

#include "unity.cpp"
"""
        
        main_path.write_text(main_content, encoding='utf-8')
        return main_path